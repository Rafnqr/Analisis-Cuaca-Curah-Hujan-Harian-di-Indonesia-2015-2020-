# -*- coding: utf-8 -*-
"""FP-BDPA-FINAL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z0B9F7W_J7eTONsQUBWRJThh9x6SJVCH
"""

# Commented out IPython magic to ensure Python compatibility.
 import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
df = pd.read_csv("climate_data.csv", header=0)
df.head(5)

print("Dimensi data (baris, kolom):", df.shape)
df.info()
df.columns

# Pastikan kolom 'date' diformat sebagai datetime
df['date'] = pd.to_datetime(df['date'], format="%d-%m-%Y")

# Filter data antara tahun 2015 hingga 2020 (inklusif)
df_filtered = df[(df['date'].dt.year >= 2015) & (df['date'].dt.year <= 2020)]
print("Jumlah baris data dari tahun 2015 sampai 2020:", len(df_filtered))
# Hitung rata-rata semua kolom numerik untuk setiap tanggal
df_grouped = df_filtered.groupby('date').mean(numeric_only=True).reset_index()
df_filtered.tail()

# Tampilkan jumlah data kosong per kolom sebelum dibersihkan
print("Jumlah data kosong per kolom (sebelum dibersihkan):\n", df_filtered.isnull().sum())

# Hapus baris yang memiliki nilai kosong
df_cleaned = df_filtered.dropna()

# Tampilkan jumlah baris setelah dibersihkan
print("Jumlah baris setelah menghapus data kosong:", len(df_cleaned))

# Tampilkan jumlah data kosong per kolom setelah dibersihkan
print("Jumlah data kosong per kolom (setelah dibersihkan):\n", df_cleaned.isnull().sum())

# Menggabungkan dan menghitung rata-rata untuk setiap tanggal
df_grouped = df_cleaned.groupby('date').agg({
    'Tn': 'mean',
    'Tx': 'mean',
    'Tavg': 'mean',
    'RH_avg': 'mean',
    'RR': 'mean',
    'ss': 'mean',
    'ff_x': 'mean',
    'ddd_x': 'mean',
    'ff_avg': 'mean',
    'station_id': 'first',  # Ambil nilai pertama
    'ddd_car': lambda x: x.mode().iloc[0] if not x.mode().empty else None  # Ambil modus untuk kolom kategorikal
}).reset_index()

# Cek ulang jumlah baris
print("Jumlah baris setelah dikelompokkan per tanggal:", len(df_grouped))
# Tampilkan semua baris
pd.set_option('display.max_rows', None)

# Tampilkan 5 baris pertama
print("\n5 Baris Pertama:")
print(df_grouped.head(5))
# Tampilkan 5 baris terakhir
print("5 Baris Terakhir:")
print(df_grouped.tail(5))

print(df_grouped.describe())

#Korelasi Antar Variabel Iklim
plt.figure(figsize=(10, 8))
sns.heatmap(df_grouped.corr(numeric_only=True), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Heatmap Korelasi Antar Variabel Iklim')
plt.show()

#Tren Suhu Rata-rata dan Curah Hujan Harian
plt.figure(figsize=(15, 5))
plt.plot(df_grouped['date'], df_grouped['Tavg'], label='Tavg (°C)', color='orange')
plt.plot(df_grouped['date'], df_grouped['RR'], label='Curah Hujan (mm)', color='blue')
plt.title('Tren Suhu Rata-rata dan Curah Hujan Harian')
plt.xlabel('Tanggal')
plt.ylabel('Nilai')
plt.legend()
plt.tight_layout()
plt.show()

#Eksperimen 1: Klasifikasi Hari Hujan vs Tidak Hujan
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# Label: hujan atau tidak
df_grouped['rain'] = df_grouped['RR'].apply(lambda x: 1 if x > 0 else 0)

X = df_grouped[['Tn', 'Tx', 'RH_avg', 'ss', 'ff_x']]
y = df_grouped['rain']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model_rf = RandomForestClassifier(random_state=42)
model_rf.fit(X_train, y_train)
print("Akurasi:", model_rf.score(X_test, y_test))

# Visualisasi feature importance
importances = model_rf.feature_importances_
plt.figure(figsize=(8, 4))
sns.barplot(x=importances, y=X.columns)
plt.title("Pentingnya Fitur dalam Memprediksi Hari Hujan")
plt.show()

#Eksperimen 2: Clustering Hari-hari Berdasarkan Cuaca (KMeans)
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import os
os.environ['LOKY_MAX_CPU_COUNT'] = '4'

X = df_grouped[['Tavg', 'RH_avg', 'RR', 'ss', 'ff_avg']]
X_scaled = StandardScaler().fit_transform(X)

kmeans = KMeans(n_clusters=3, random_state=42)
df_grouped['cluster'] = kmeans.fit_predict(X_scaled)

# Visualisasi cluster
plt.figure(figsize=(10, 5))
sns.scatterplot(x='Tavg', y='RH_avg', hue='cluster', data=df_grouped, palette='Set1')
plt.title("Clustering Hari Berdasarkan Suhu & Kelembapan")
plt.xlabel("Tavg (°C)")
plt.ylabel("RH_avg (%)")
plt.show()

#Eksperiman 3 : Prediksi Suhu Rata-Rata (Tavg) dari Faktor Lainnya
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Fitur dan target
X = df_grouped[['Tn', 'Tx', 'RH_avg', 'RR', 'ss', 'ff_x', 'ddd_x', 'ff_avg']]
y = df_grouped['Tavg']

# Bagi data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model
model = LinearRegression()
model.fit(X_train, y_train)
# Evaluasi
y_pred = model.predict(X_test)

# Visualisasi hasil prediksi
plt.figure(figsize=(8, 5))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([y.min(), y.max()], [y.min(), y.max()], '--r')
plt.xlabel("Tavg Aktual")
plt.ylabel("Tavg Prediksi")
plt.title("Prediksi Suhu Rata-rata (Tavg) - Linear Regression")
plt.show()

print("R2 Score:", r2_score(y_test, y_pred))
print("MSE:", mean_squared_error(y_test, y_pred))

